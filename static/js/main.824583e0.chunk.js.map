{"version":3,"sources":["transitions/slide.module.css","transitions/pop.module.css","components/Section/Section.module.css","components/Notification/Notification.module.css","redux/actions.js","components/ContactForm/ContactForm.jsx","components/Section/Section.jsx","components/Contact/Contact.jsx","components/ContactList/ContactList.jsx","components/ContactList/ContactListContainer.jsx","components/ContactsFilter/ContactsFilter.jsx","components/Notification/Notification.jsx","components/App/App.jsx","components/App/AppContainer.jsx","redux/reducers.js","redux/store.js","index.js"],"names":["module","exports","addContact","createAction","changeFilter","deleteContact","ContactForm","state","name","number","handleInput","e","setState","target","value","submitForm","contact","id","uuid","props","handleSubmit","this","onSubmit","placeholder","onChange","type","options","delimiter","blocks","numericOnly","Component","Section","title","children","className","styles","section","Contact","handleDelete","onClick","ContactList","contacts","contactItems","map","CSSTransition","key","classNames","slideTransitions","timeout","TransitionGroup","component","connect","dispatch","ContactsFilter","filter","Notification","container","App","didMount","filterContacts","toLowerCase","includes","handleFilter","preventDefault","findIndex","item","contactExistModal","setTimeout","ps","JSON","parse","localStorage","getItem","forEach","prevProps","setItem","stringify","filteredContacts","in","appear","length","filterTransition","unmountOnExit","contactId","contactsReducer","createReducer","action","payload","push","store","createStore","devToolsEnhancer","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.824583e0.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"slide_enter__BLs75\",\"enterActive\":\"slide_enterActive__2XArv\",\"exit\":\"slide_exit__2XvOt\",\"exitActive\":\"slide_exitActive__3LNYO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"enter\":\"pop_enter__1NM7x\",\"enterActive\":\"pop_enterActive__1Bhql\",\"exit\":\"pop_exit__1_phz\",\"exitActive\":\"pop_exitActive__3xbz2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"section\":\"Section_section__Ap5Zy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"Notification_container__2Ycj5\"};","import { createAction } from '@reduxjs/toolkit';\n// import type from './actionTypes';\n\nexport const addContact = createAction('ADD_CONTACT');\nexport const changeFilter = createAction('CHANGE_FILTER');\nexport const deleteContact = createAction('DELETE_CONTACT');\n\n// export const addContact = contact => ({\n//   type: Type.ADD_CONTACT,\n//   contact,\n// });\n\n// export const changeFilter = filter => ({\n//   type: Type.CHANGE_FILTER,\n//   filter,\n// });\n\n// export const deleteContact = contactId => ({\n//   type: Type.DELETE_CONTACT,\n//   contactId,\n// });\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Cleave from 'cleave.js/react';\nimport { v4 as uuid } from 'uuid';\n\nexport default class ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n  handleInput = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n  submitForm = e => {\n    const contact = {\n      id: uuid(),\n      name: this.state.name,\n      number: this.state.number,\n    };\n    this.props.handleSubmit(e, contact);\n    this.setState({\n      name: '',\n      number: '',\n    });\n  };\n  render() {\n    const { name, number } = this.state;\n    return (\n      <form onSubmit={this.submitForm}>\n        <div>\n          <h3>Name</h3>\n          <input\n            placeholder=\"Enter name\"\n            onChange={this.handleInput}\n            name=\"name\"\n            value={name}\n            type=\"text\"\n          />\n        </div>\n        <div>\n          <h3>Number</h3>\n          <Cleave\n            onChange={this.handleInput}\n            name=\"number\"\n            placeholder=\"Enter phone number\"\n            value={number}\n            options={{\n              delimiter: '-',\n              blocks: [3, 2, 2],\n              numericOnly: true,\n            }}\n          />\n        </div>\n        <input type=\"submit\" value=\"Add\" />\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  handleSubmit: PropTypes.func.isRequired,\n};\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './Section.module.css';\nconst Section = props => {\n  const { title, children } = props;\n  return (\n    <div className={styles.section}>\n      <h2>{title}</h2>\n      {children}\n    </div>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.any,\n};\nexport default Section;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Contact = ({ name = '', number = '', handleDelete }) => (\n  <div>\n    <span>\n      {name || 'noName'}: {number || 'noNumber'}\n    </span>\n    <button onClick={handleDelete} type=\"button\">\n      Delete\n    </button>\n  </div>\n);\n\nContact.propTypes = {\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  handleDelete: PropTypes.func.isRequired,\n};\n\nexport default Contact;\n","import React from 'react';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group';\nimport Contact from '../Contact/Contact';\nimport PropTypes from 'prop-types';\nimport slideTransitions from '../../transitions/slide.module.css';\n\nconst ContactList = ({ contacts, deleteContact }) => {\n  const contactItems = contacts.map(({ id, name, number }) => {\n    const handleDelete = () => {\n      deleteContact(id);\n    };\n    return (\n      <CSSTransition key={id} classNames={slideTransitions} timeout={200}>\n        <li key={id}>\n          <Contact\n            handleDelete={handleDelete}\n            id={id}\n            name={name}\n            number={number}\n          />\n        </li>\n      </CSSTransition>\n    );\n  });\n  return <TransitionGroup component=\"ul\">{contactItems}</TransitionGroup>;\n};\n\nContactList.propTypes = {\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ).isRequired,\n  deleteContact: PropTypes.func.isRequired,\n};\nexport default ContactList;\n","import { connect } from 'react-redux';\nimport { deleteContact } from '../../redux/actions';\nimport ContactList from './ContactList';\n\nconst mapDisaptchToProps = dispatch => ({\n  deleteContact: id => dispatch(deleteContact(id)),\n});\n\nexport default connect(null, mapDisaptchToProps)(ContactList);\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst ContactsFilter = ({ onChange, filter }) => {\n  return (\n    <div>\n      <input type=\"text\" value={filter} onChange={onChange} name=\"filter\" />\n    </div>\n  );\n};\n\nContactsFilter.propTypes = {\n  onChange: PropTypes.func.isRequired,\n  filter: PropTypes.string.isRequired,\n};\nexport default ContactsFilter;\n","import React from 'react';\nimport styles from './Notification.module.css';\nconst Notification = () => {\n  return (\n    <div className={styles.container}>\n      <p>Contact already exists!</p>\n    </div>\n  );\n};\n\nexport default Notification;\n","import React, { Component } from 'react';\nimport ContactForm from '../ContactForm/ContactForm';\nimport Section from '../Section/Section';\nimport ContactList from '../ContactList/ContactListContainer';\nimport ContactsFilter from '../ContactsFilter/ContactsFilter';\nimport { CSSTransition } from 'react-transition-group';\nimport slideTransitions from '../../transitions/slide.module.css';\nimport filterTransition from '../../transitions/pop.module.css';\nimport Notification from '../Notification/Notification';\n\nclass App extends Component {\n  state = {\n    didMount: false,\n  };\n  componentDidMount() {\n    this.setState(ps => {\n      return {\n        didMount: true,\n      };\n    });\n    let contacts = [];\n\n    contacts = JSON.parse(localStorage.getItem('contacts')) || [];\n\n    contacts.forEach(contact => {\n      this.props.addContact(contact);\n    });\n  }\n  componentDidUpdate(prevProps) {\n    const { contacts } = this.props;\n    if (contacts !== prevProps.contacts) {\n      localStorage.setItem('contacts', JSON.stringify(contacts, null, 2));\n    }\n  }\n\n  filterContacts = (contacts, filter) => {\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filter.toLowerCase());\n    });\n  };\n  handleInput = e => {\n    this.setState({\n      [e.target.name]: e.target.value,\n    });\n  };\n  handleFilter = e => {\n    this.props.changeFilter(e.target.value);\n  };\n  handleSubmit = (e, contact) => {\n    e.preventDefault();\n    if (\n      this.props.contacts.findIndex(item => item.name === contact.name) !== -1\n    ) {\n      this.setState({\n        contactExistModal: true,\n      });\n      setTimeout(() => {\n        this.setState({ contactExistModal: false });\n      }, 2000);\n      return false;\n    }\n    this.props.addContact(contact);\n  };\n\n  handleDelete = id => {\n    this.props.deleteContact(id);\n  };\n\n  render() {\n    const { name, number, didMount, contactExistModal } = this.state;\n    const { contacts, filter } = this.props;\n    const filteredContacts = this.filterContacts(contacts, filter);\n    return (\n      <div>\n        <CSSTransition\n          in={didMount}\n          classNames={slideTransitions}\n          timeout={250}\n          key={0}\n          appear\n        >\n          <h1>Phonebook</h1>\n        </CSSTransition>\n        <Section>\n          <ContactForm\n            name={name}\n            number={number}\n            handleSubmit={this.handleSubmit}\n            handleInput={this.handleInput}\n          />\n        </Section>\n        <Section title=\"Contacts\">\n          <CSSTransition\n            in={contacts.length > 1}\n            classNames={filterTransition}\n            timeout={250}\n            unmountOnExit\n          >\n            <ContactsFilter onChange={this.handleFilter} filter={filter} />\n          </CSSTransition>\n\n          <ContactList contacts={filteredContacts} />\n        </Section>\n        <CSSTransition\n          in={contactExistModal}\n          classNames={filterTransition}\n          timeout={250}\n          unmountOnExit\n        >\n          <Notification />\n        </CSSTransition>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import { connect } from 'react-redux';\nimport { addContact, changeFilter, deleteContact } from '../../redux/actions';\nimport App from './App';\n\nconst mapStateToProps = state => ({\n  contacts: state.contacts,\n  filter: state.filter,\n});\n\nconst mapDispatchToProps = dispatch => ({\n  addContact: contact => dispatch(addContact(contact)),\n  changeFilter: filter => dispatch(changeFilter(filter)),\n  deleteContact: contactId => dispatch(deleteContact(contactId)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import { addContact, deleteContact, changeFilter } from './actions';\n// import Type from './actionTypes';\nimport { createReducer } from '@reduxjs/toolkit';\nconst initialState = {\n  contacts: [],\n  filter: '',\n};\n\nexport const contactsReducer = createReducer(initialState, {\n  [addContact]: (state, action) => {\n    const { payload } = action;\n    state.contacts.push(payload);\n  },\n  [deleteContact]: (state, action) => {\n    const { payload } = action;\n    return {\n      ...state,\n      contacts: state.contacts.filter(contact => contact.id !== payload),\n    };\n  },\n  [changeFilter]: (state, action) => {\n    const { payload } = action;\n    state.filter = payload;\n  },\n});\n\n// export const contactsReducer = (state = initialState, action) => {\n//   switch (action.type) {\n//     case Type.ADD_CONTACT:\n//       return {\n//         ...state,\n//         contacts: [...state.contacts, action.contact],\n//       };\n\n//     case Type.CHANGE_FILTER:\n//       return {\n//         ...state,\n//         filter: action.filter,\n//       };\n\n//     case Type.DELETE_CONTACT:\n//       return {\n//         ...state,\n//         contacts: state.contacts.filter(\n//           contact => contact.id !== action.contactId,\n//         ),\n//       };\n//     default:\n//       return state;\n//   }\n// };\n","import { createStore } from 'redux';\n\nimport { devToolsEnhancer } from 'redux-devtools-extension';\nimport { contactsReducer } from './reducers';\n\nconst store = createStore(contactsReducer, devToolsEnhancer());\n\nexport default store;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App/AppContainer';\n\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}